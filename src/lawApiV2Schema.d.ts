/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/laws": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 法令一覧取得API
         * @description ## 概要
         *     > &nbsp;&nbsp;指定条件に該当する法令データが返却されます。<br>
         *     > &nbsp;&nbsp;例えば、法令名（`law_title`）を指定した場合、指定した法令名を含む法令データが返却されます。<br>
         *     > &nbsp;&nbsp;法令種別（`law_type`）を指定した場合、指定した法令種別の法令データが返却されます。<br>
         *     > &nbsp;&nbsp;指定必須のパラメータはありません。また、全パラメータを組み合わせる必要もありません。<br>
         *     > &nbsp;&nbsp;必要なパラメータを組み合わせて法令データを取得することができます。<br>
         *
         *
         *     ## 補足事項
         *     > &nbsp;&nbsp;本エンドポイントは、指定条件に該当するデータを`laws`に格納します。<br>
         *     > &nbsp;&nbsp;`laws`配下に格納されるデータの解説は以下のとおりです。<br>
         *
         *     > * `law_info`
         *     >> &nbsp;&nbsp;&nbsp;法令番号（`law_num`）や公布日（`promulgation_date`）等、改正履歴に依存しないデータが格納されます。
         *     <br>
         *
         *     > * `revision_info`
         *     >> &nbsp;&nbsp;&nbsp;改正後の法令名（`law_title`）や改正法令公布日（`amendment_promulgate_date`）等、改正履歴に依存するデータが格納されます。<br>
         *     >> &nbsp;&nbsp;&nbsp;法令の時点（`asof`）を指定した場合はその時点で最新の改正履歴を格納します。<br>
         *
         *     > * `current_revision_info`
         *     >>  &nbsp;&nbsp;&nbsp;法令の時点（`asof`）等の指定にかかわらず、現時点で最新の改正履歴を格納します。<br>
         *
         */
        get: operations["get-laws"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/law_revisions/{law_id_or_num}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 法令履歴一覧取得API
         * @description ## 概要
         *     > &nbsp;&nbsp;法令ID（`law_id`）又は法令番号(`law_num`)を指定必須として、指定した法令の改正履歴が返却されます。<br>
         *     > &nbsp;&nbsp;改正履歴は`revisions`配下に格納されており、上から法令履歴ID（`law_revision_id`）が新しい順で改正履歴が返却されます。<br>
         *     > &nbsp;&nbsp;指定任意のパラメータと組み合わせることで、返却データを絞り込むことができます。<br>
         *
         *     ## 補足事項
         *     > &nbsp;&nbsp;本エンドポイントで返却されるデータの解説は以下のとおりです。<br>
         *
         *     > * `law_info`
         *     >> &nbsp;&nbsp;&nbsp;法令番号（`law_num`）や公布日（`promulgation_date`）等、改正履歴に依存しない法令データが格納されます。
         *
         *     > * `revisions`
         *     >> &nbsp;&nbsp;&nbsp;改正後の法令名（`law_title`）や改正法令公布日（`amendment_promulgate_date`）等、改正履歴に依存する法令データが格納されます。<br>
         *
         */
        get: operations["get-revisions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/law_data/{law_id_or_num_or_revision_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 法令本文取得API
         * @description ## 概要
         *     > &nbsp;&nbsp;法令ID（`law_id`）、法令番号（`law_num`）、法令履歴ID（`law_revision_id`）のいずれかを指定必須として、指定した法令の本文を取得します。<br>
         *     > * &nbsp;&nbsp;法令ID（`law_id`）、法令番号（`law_num`）を指定した場合は、現時点で最新のリビジョンの本文を取得します。<br>
         *     > * &nbsp;&nbsp;法令履歴ID（`law_revision_id`）を指定した場合は、該当するリビジョンの本文を取得します。<br>
         *     > * &nbsp;&nbsp;上記の指定必須のパラメータがわからない場合は、法令一覧取得APIで法令名（`law_title`）等を指定してパラメータを調べてください。
         *
         *     >&nbsp;&nbsp;<font color="red"><b>注意：</b><br>
         *     >&nbsp;&nbsp;法令本文のデータサイズが大きい場合、エラーが発生することがあります。<br>
         *     >&nbsp;&nbsp;エラーが発生した場合は、SwaggerUI以外（Microsoft EdgeやGoogle Chromeといったブラウザで法令APIのURLを直接指定等）で実行してください。</font>
         *
         *
         *     ## 補足事項
         *     > &nbsp;&nbsp;本エンドポイントで返却されるデータの解説は以下のとおりです。<br>
         *
         *     > * `attached_files_info`
         *     >>&nbsp;&nbsp;添付ファイルに関するデータが格納されます。
         *
         *
         *     > * `law_info`
         *     >>&nbsp;&nbsp;法令番号（`law_num`）や公布日(`promulgation_date`)等、改正履歴に依存しないデータが格納されます。
         *
         *
         *     > * `revision_info`
         *     >>&nbsp;&nbsp;改正後の法令名（`law_title`）や改正法令公布日（`amendment_promulgate_date`）等、改正履歴に依存するデータが格納されます。<br>
         *     >>&nbsp;&nbsp;法令の時点（`asof`）を指定した場合はその時点で最新の改正履歴を格納します。
         *
         *     > * `law_full_text`
         *     >>&nbsp;&nbsp;法令の本文情報が格納されます。<br>
         *     >>&nbsp;&nbsp;要素（`elm`）パラメータを指定することで要素を絞り込んで本文を取得することができます。指定方法はSchemasの<a href="#model-elm">`elm`</a>を参照してください。
         *
         *
         *     ## 法令本文のレスポンス形式
         *     > &nbsp;&nbsp;レスポンス形式（`response_format`）を指定することでデータのレスポンス形式をJSON、又はXMLに切り替えることができます。<br>
         *     > &nbsp;&nbsp;また、法令本文の形式（`law_full_text_format`）を指定することで法令本文（`law_full_text`）のレスポンス形式を切り替えることができます。
         *
         *     > * レスポンス形式（`responce_format`）をJSON 、かつ法令本文（`law_full_text`） をXMLで指定した場合、法令本文（`law_full_text`）はXMLで返却されます。<br>
         *
         *     > * レスポンス形式（`responce_format`）をXML、かつ法令本文（`law_full_text`）をJSONで指定した場合、法令本文（`law_full_text`）はJSONで返却されます。<br>
         *
         *     >> <font color="red">上記のようにresponce_formatとlaw_full_textが異なる場合、law_full_textの返却値はBase64でエンコードしておりますので、ご利用の際はBase64でデコードしてください。</font>
         *
         *
         *     ## XMLとJSONの関係性
         *
         *     >> 例）以下のXMLをJSONで表した場合の対応表を以下に記します。<br>
         *     >> ### XMLイメージ
         *
         *     >>> <pre><code>&lt;Sentence Num="1" WritingMode="vertical"&gt;
         *     &nbsp;&nbsp;この法律は、処分、行政指導及び届出に関する手続並びに命令等を定める手続に関し、・・・
         *     &lt;/Sentence&gt;
         *     </code></pre>
         *
         *
         *
         *     >> ### JSONイメージ
         *     >>> <pre><code>{
         *     &nbsp;&nbsp;"tag": "Sentence",
         *     &nbsp;&nbsp;"attr": {
         *     &nbsp;&nbsp;&nbsp;&nbsp;"Num": "1",
         *     &nbsp;&nbsp;&nbsp;&nbsp;"WritingMode": "vertical"
         *     &nbsp;&nbsp;},
         *     &nbsp;&nbsp;"children": [
         *     &nbsp;&nbsp;&nbsp;&nbsp;"この法律は、処分、行政指導及び届出に関する手続並びに命令等を定める手続に関し、・・・"
         *     &nbsp;&nbsp;]
         *     }
         *     </code></pre>
         *
         *
         *     >> ### XMLとJSONの対応表
         *     >>> <table bgcolor="white" border="1">
         *       <tr bgcolor="#DDFFFF">
         *         <th width="10%">項目名</th>
         *         <th width="45%">XML</th>
         *         <th width="45%">JSON</th>
         *       </tr>
         *       <tr>
         *         <td>タグ</td>
         *         <td>Sentence</td>
         *         <td>"tag": "Sentence"</td>
         *       </tr>
         *       <tr>
         *         <td>属性</td>
         *         <td>Num="1" WritingMode="vertical"</td>
         *         <td>"attr": {"Num": "1","WritingMode": "vertical"}</td>
         *         </tr>
         *       <tr>
         *         <td>子要素</td>
         *         <td>この法律は、処分、行政指導及び届出に関する手続並びに命令等を定める手続に関し、・・・</td>
         *         <td>"children": ["この法律は、処分、行政指導及び届出に関する手続並びに命令等を定める手続に関し、・・・"]</td>
         *       </tr>
         *     </table>
         *
         */
        get: operations["get-law_data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attachment/{law_revision_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 添付ファイル取得API
         * @description ## 概要
         *     > &nbsp;&nbsp;法令履歴ID（`law_revision_id`）を指定必須パラメータとして、法令本文の添付ファイルを取得します。<br>
         *     > &nbsp;&nbsp;法令データ上に存在する添付ファイルの拡張子には、`jpg`、`pdf`があります。<br>
         *
         *     > &nbsp;&nbsp;法令本文取得APIのレスポンスデータに含まれる`attached_files_info`のsrc属性（`src`）を指定することで特定の添付ファイルが取得できます。<br>
         *     > &nbsp;&nbsp;src属性（`src`）を指定しない場合は、法令本文に含まれる添付ファイルをZip形式で一括取得できます。
         *
         *
         *     ## 補足事項
         *     > &nbsp;&nbsp;src属性（`src`）の指定有無によってレスポンスの動作が異なります。<br>
         *
         *     > &nbsp;&nbsp;src属性（`src`）指定時、
         *     > * &nbsp;&nbsp;SwaggerUIでAPIを実行した場合、`jpg`が返却される場合は画像が表示されます。`pdf`の場合はダウンロードリンクが表示されます。
         *     > * &nbsp;&nbsp;URLを直接入力した場合、`jpg`が返却される場合は画像が表示されます。`pdf`の場合はファイルがダウンロードされます。
         *
         *     > &nbsp;&nbsp;src属性（`src`）未指定時、
         *     > * &nbsp;&nbsp;SwaggerUIでAPIを実行した場合、`jpg`、`pdf`のいずれもダウンロードリンクが表示されます。
         *     > * &nbsp;&nbsp;URLを直接入力した場合、`jpg`、`pdf`のいずれもZip形式でファイルがダウンロードされます。
         *
         */
        get: operations["get-attachment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/keyword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * キーワード検索API
         * @description ## 概要
         *     > キーワード（`keyword`）を指定必須とし、法令本文内に指定したキーワード（`keyword`）を含む法令を取得します。<br>
         *     > 本エンドポイントでは、法令本文（`law_full_text`）を対象に全文検索を行います。<br>
         *     > 指定任意のパラメータと組み合わせることで、返却データを絞り込むことができます。
         *
         *     ## 補足事項
         *     > &nbsp;&nbsp;本エンドポイントで返却されるデータの解説は以下のとおりです。
         *
         *     > * `law_info`
         *     >> &nbsp;&nbsp;&nbsp;法令番号（`law_num`）や公布日（`promulgation_date`）等、改正履歴に依存しないデータが格納されます。
         *     <br>
         *
         *     > * `revision_info`
         *     >> &nbsp;&nbsp;&nbsp;改正後の法令名（`law_title`）や改正法令公布日（`amendment_promulgate_date`）等、改正履歴に依存するデータが格納されます。<br>
         *     >> &nbsp;&nbsp;&nbsp;法令の時点（`asof`）を指定した場合はその時点で最新の改正履歴を格納します。<br>
         *
         *     > * ### `sentences`
         *     >> &nbsp;&nbsp;キーワード（`keyword`）に該当する法令本文の見出し等の構造（`position`）と条文内容（`text`）が格納されます。
         *
         */
        get: operations["get-keyword"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/law_file/{file_type}/{law_id_or_num_or_revision_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 法令本文ファイル取得API
         * @description ## 概要
         *     > &nbsp;&nbsp;法令ID（`law_id`）、法令番号（`law_num`）、法令履歴ID（law_revision_id）のいずれかと、ファイル種別（`file_type`）を指定必須として、<br>
         *     > &nbsp;&nbsp;法令本文を指定したファイル種別に（`file_type`）変換してダウンロードすることができます。
         *
         */
        get: operations["get-law_file"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * amendment_type
         * @description 改正種別
         *       * `1`      - 新規
         *       * `3`      - 一部改正
         *       * `6`      - 全部改正
         *       * `8`      - 廃止
         * @enum {string}
         */
        amendment_type: "1" | "3" | "6" | "8";
        /**
         * attached_file
         * @description 添付ファイル情報
         *
         */
        attached_file: {
            /**
             * @description 法令ID
             * @example 322CO0000000016_20230508_505CO0000000175
             */
            law_revision_id?: string;
            /**
             * @description 法令XML中のFig要素のsrc属性
             * @example ./pict/M06SE065-001.jpg
             */
            src?: string;
            /**
             * Format: date-time
             * @description 正誤等による更新日時
             * @example 2023-07-01T14:30:15+09:00
             */
            updated?: string;
        };
        /**
         * attached_files_info
         * @description 添付ファイル情報
         */
        attached_files_info: {
            /**
             * @description 添付ファイルデータ（添付ファイルをフォルダ名pictに収集し、フォルダ全体をZip形式で圧縮したファイルをBase64でエンコードした文字列）
             * @example
             */
            image_data?: string;
            /** @description 添付ファイル一覧 */
            attached_files?: components["schemas"]["attached_file"][];
        };
        /**
         * category_cd
         * @description 事項別分類コード:<br>
         *       * `001` - 憲法
         *       * `002` - 刑事
         *       * `003` - 財務通則
         *       * `004` - 水産業
         *       * `005` - 観光
         *       * `006` - 国会
         *       * `007` - 警察
         *       * `008` - 国有財産
         *       * `009` - 鉱業
         *       * `010` - 郵務
         *       * `011` - 行政組織
         *       * `012` - 消防
         *       * `013` - 国税
         *       * `014` - 工業
         *       * `015` - 電気通信
         *       * `016` - 国家公務員
         *       * `017` - 国土開発
         *       * `018` - 事業
         *       * `019` - 商業
         *       * `020` - 労働
         *       * `021` - 行政手続
         *       * `022` - 土地
         *       * `023` - 国債
         *       * `024` - 金融・保険
         *       * `025` - 環境保全
         *       * `026` - 統計
         *       * `027` - 都市計画
         *       * `028` - 教育
         *       * `029` - 外国為替・貿易
         *       * `030` - 厚生
         *       * `031` - 地方自治
         *       * `032` - 道路
         *       * `033` - 文化
         *       * `034` - 陸運
         *       * `035` - 社会福祉
         *       * `036` - 地方財政
         *       * `037` - 河川
         *       * `038` - 産業通則
         *       * `039` - 海運
         *       * `040` - 社会保険
         *       * `041` - 司法
         *       * `042` - 災害対策
         *       * `043` - 農業
         *       * `044` - 航空
         *       * `045` - 防衛
         *       * `046` - 民事
         *       * `047` - 建築・住宅
         *       * `048` - 林業
         *       * `049` - 貨物運送
         *       * `050` - 外事
         * @enum {string}
         */
        category_cd: "001" | "002" | "003" | "004" | "005" | "006" | "007" | "008" | "009" | "010" | "011" | "012" | "013" | "014" | "015" | "016" | "017" | "018" | "019" | "020" | "021" | "022" | "023" | "024" | "025" | "026" | "027" | "028" | "029" | "030" | "031" | "032" | "033" | "034" | "035" | "036" | "037" | "038" | "039" | "040" | "041" | "042" | "043" | "044" | "045" | "046" | "047" | "048" | "049" | "050";
        /**
         * current_revision_status
         * @description 履歴の状態:
         *       * `CurrentEnforced`  - 現施行法令
         *       * `UnEnforced`       - 未施行法令
         *       * `PreviousEnforced` - 過去施行法令
         *       * `Repeal`           - 廃止法令（廃止・失効・実効性喪失）
         * @enum {string}
         */
        current_revision_status: "CurrentEnforced" | "UnEnforced" | "PreviousEnforced" | "Repeal";
        /**
         * elm
         * @description 指定した法令XMLの要素に該当する法令本文を取得することができます。<br>
         *     * 要素を組み合わせる場合は、`-`（半角ハイフン）で要素を結合してください。<br>
         *     > （例：本則第１項 `MainProvision-Paragraph_1`）
         *     * 下記の表に要素毎の一覧と指定方法を記載しております。
         *     * 表に掲載している要素は一例であり、elmで取得可能な要素の詳細は<a href="https://laws.e-gov.go.jp/docs/" target="_blank">法令データ ドキュメンテーション</a>を参照してください。<br>
         *
         *     <font color="red">
         *     補足：<br>
         *     &nbsp;&nbsp;指定した要素内に他要素がある場合は、他要素の情報も取得されます。<br>
         *     &nbsp;&nbsp;例えば、`MainProvision-Paragraph[1]`を指定した場合は、指定された`Paragraph`要素内に`FigStruct`要素が存在していると`FigStruct`情報も含めて取得されます。
         *     </font>
         *
         *     <table bgcolor="white" border="1">
         *          <tr bgcolor="#DDFFFF">
         *            <th width="20%">法令XML要素</th>
         *            <th width="20%">要素の意味</th>
         *            <th width="20%">指定例</th>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; LawNum </td>
         *            <td>&nbsp; 法令番号 </td>
         *            <td>&nbsp; LawNum[1]</td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; LawTitle </td>
         *            <td>&nbsp; 題名 </td>
         *            <td>&nbsp; LawTitle[1]</td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; EnactStatement </td>
         *            <td>&nbsp; 制定文 </td>
         *            <td>&nbsp; EnactStatement[1] </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; TOC </td>
         *            <td>&nbsp; 目次 </td>
         *            <td>&nbsp; TOC[1] </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; Preamble </td>
         *            <td>&nbsp; 前文 </td>
         *            <td>&nbsp; Preamble[1] </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; MainProvision </td>
         *            <td>&nbsp; 本則 </td>
         *            <td>&nbsp; MainProvision[1] </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; Part </td>
         *            <td>&nbsp; 編 </td>
         *            <td>&nbsp; Part_1 </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; Chapter </td>
         *            <td>&nbsp; 章 </td>
         *            <td>&nbsp; Chapter_1 </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; Section </td>
         *            <td>&nbsp; 節 </td>
         *            <td>&nbsp; Section_1 </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; Subsection </td>
         *            <td>&nbsp; 款 </td>
         *            <td>&nbsp; Subsection_1 </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; Division </td>
         *            <td>&nbsp; 目 </td>
         *            <td>&nbsp; Division_1 </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; Article </td>
         *            <td>&nbsp; 条 </td>
         *            <td>&nbsp; Article_1 </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; Paragraph </td>
         *            <td>&nbsp; 項 </td>
         *            <td>&nbsp; Paragraph_1 </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; Item </td>
         *            <td>&nbsp; 号 </td>
         *            <td>&nbsp; Item_1 </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; Subitem1 </td>
         *            <td>&nbsp; 号細分 </td>
         *            <td>&nbsp; Subitem1_1 </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; SupplProvision </td>
         *            <td>&nbsp; 附則 </td>
         *            <td>&nbsp; SupplProvision[1] </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; AppdxTable </td>
         *            <td>&nbsp; 別表 </td>
         *            <td>&nbsp; AppdxTable[1] </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; AppdxStyle </td>
         *            <td>&nbsp; 別記様式 </td>
         *            <td>&nbsp; AppdxStyle[1] </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; AppdxFormat </td>
         *            <td>&nbsp; 別記書式 </td>
         *            <td>&nbsp; AppdxFormat[1] </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; Appdx </td>
         *            <td>&nbsp; 付録 </td>
         *            <td>&nbsp; Appdx[1] </td>
         *          </tr>
         *          <tr>
         *            <td>&nbsp; AppdxFig </td>
         *            <td>&nbsp; 別図 </td>
         *            <td>&nbsp; AppdxFig[1] </td>
         *          </tr>
         *        </table>
         *
         */
        elm: string;
        /** @description エラー情報 */
        error_info: {
            /**
             * @description エラーコード<br>
             *
             * @example 400001
             */
            code?: string;
            /**
             * @description エラーメッセージ
             * @example 法令種別（law_type、law_num_type）が誤っています。
             */
            message?: string;
        };
        /**
         * file_type
         * @description ファイル種別:
         *       * `xml`         - XML
         *       * `json`        - JSON
         *       * `html`        - HTML
         *       * `rtf`         - RTF
         *       * `docx`        - DOCX
         * @enum {string}
         */
        file_type: "xml" | "json" | "html" | "rtf" | "docx";
        /** @description キーワード検索APIレスポンス */
        keyword_response: {
            /**
             * Format: int64
             * @description 指定`keyword`でヒットした総件数
             * @example 10000
             */
            total_count?: number;
            /**
             * Format: int64
             * @description レスポンス単位で表示した`sentences`数の総和
             * @example 100
             */
            sentence_count?: number;
            /**
             * Format: int64
             * @description 次指定する`offset`値。末尾まで取得が完了した場合はnull
             * @example 200
             */
            next_offset?: number | null;
            /** @description 法令ID単位の情報リスト<br>
             *     * `revision_info` - 指定時点において効力を持つ版のメタ情報
             *      */
            items?: {
                law_info?: components["schemas"]["law_info"];
                revision_info?: components["schemas"]["revision_info"];
                /** @description 検索ヒット箇所一覧 */
                sentences?: {
                    /**
                     * @description 検索ヒットの場所
                     * @example MainProvision-Article_21-Paragraph_3
                     */
                    position?: components["schemas"]["elm"];
                    /**
                     * @description 条文内容です。ハイライト箇所は`<span>`タグで囲まれます。XMLでのレスポンスの場合、タグはエスケープされることにご注意ください。
                     * @example 局、部又は委員会の<span>事務局</span>には、次長を置くことができるものとし、その設置、職務及び定数は、政令でこれを定める。
                     */
                    text?: string;
                }[];
            }[];
        };
        /** @description 法令本文取得APIレスポンス */
        law_data_response: {
            attached_files_info?: components["schemas"]["attached_files_info"];
            law_info?: components["schemas"]["law_info"];
            revision_info?: components["schemas"]["revision_info"];
            /** @description 法令本文<br>
             *     ## XML/JSON形式について<br>
             *     > 以下に、XML形式とJSON形式の関係を示します。<br>
             *     > データ構造の詳細は<a href="https://laws.e-gov.go.jp/docs/" target="_blank">法令データ ドキュメンテーション</a>を参照してください。<br>
             *     > * JSON形式では、`children`オブジェクトでXML形式の階層構造を表現しています。
             *     > * XML形式とJSON形式の各要素は、丸数字で対応関係を表現しています。
             *
             *     >> ### XML形式例
             *     >>> <pre><code>&nbsp;①  ②                      ③
             *     &lt;Law LawId="123AC0000000001" LawType="Act"&gt;
             *     &nbsp;&nbsp;&nbsp;④
             *     &nbsp;&nbsp;&lt;LawBody&gt;
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;⑤       ⑥               ⑦
             *     &nbsp;&nbsp;&nbsp;&nbsp;&lt;LawTitle AbbrKanaSeion=""&gt;保管金規則&lt;/LawTitle&gt;
             *     &nbsp;&nbsp;&lt;/LawBody&gt;
             *     &lt;/Law&gt;
             *     </code></pre>
             *
             *     >> ### JSON形式例
             *     >>> <pre><code>{
             *     &nbsp;&nbsp;"tag": "Law",  ①
             *     &nbsp;&nbsp;"attr": {
             *     &nbsp;&nbsp;&nbsp;&nbsp;"LawId": "123AC0000000001",  ②
             *     &nbsp;&nbsp;&nbsp;&nbsp;"LawType": "Act"  ③
             *     &nbsp;&nbsp;},
             *     &nbsp;&nbsp;"children": [
             *     &nbsp;&nbsp;&nbsp;&nbsp;{
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"tag": "LawBody",  ④
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"attr": {
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"children": [
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"tag": "LawTitle",  ⑤
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"attr": {
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"AbbrKanaSeion": ""  ⑥
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"children": [
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"保管金規則"  ⑦
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
             *     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]
             *     &nbsp;&nbsp;&nbsp;&nbsp;}
             *     &nbsp;&nbsp;]
             *     }
             *     </code></pre>
             *      */
            law_full_text?: string;
        };
        /**
         * law_info
         * @description 履歴に依存しない法令（法令IDで特定される法令）のメタ情報
         */
        law_info: {
            /** @description 法令種別 */
            law_type?: components["schemas"]["law_type"];
            /**
             * @description 法令ID
             * @example 322CO0000000016
             */
            law_id?: string;
            /**
             * @description 法令番号
             * @example 昭和二十二年政令第十六号
             */
            law_num?: string;
            /** @description 法令番号の元号 */
            law_num_era?: components["schemas"]["law_num_era"];
            /**
             * @description 法令番号の年
             * @example 5
             */
            law_num_year?: number;
            /** @description 法令番号の法令種別 */
            law_num_type?: components["schemas"]["law_num_type"];
            /**
             * @description 法令番号の号数
             * @example 192
             */
            law_num_num?: string;
            /**
             * Format: date
             * @description 公布日
             * @example 2023-07-01
             */
            promulgation_date?: string;
        };
        /**
         * law_num_era
         * @description 法令番号の元号
         * @enum {string}
         */
        law_num_era: "Meiji" | "Taisho" | "Showa" | "Heisei" | "Reiwa";
        /**
         * law_num_type
         * @description 法令番号の法令種別:
         *       * `Constitution`         - 憲法
         *       * `Act`                  - 法律
         *       * `CabinetOrder`         - 政令
         *       * `ImperialOrder`        - 勅令
         *       * `MinisterialOrdinance` - 府省令
         *       * `Rule`                 - 規則
         *       * `Misc`                 - その他
         * @enum {string}
         */
        law_num_type: "Constitution" | "Act" | "CabinetOrder" | "ImperialOrder" | "MinisterialOrdinance" | "Rule" | "Misc";
        /** @description 法令履歴一覧取得APIレスポンス */
        law_revisions_response: {
            law_info: components["schemas"]["law_info"];
            /** @description 版一覧 */
            revisions: components["schemas"]["revision_info"][];
        };
        /**
         * law_type
         * @description 法令種別:
         *       * `Constitution`         - 憲法
         *       * `Act`                  - 法律
         *       * `CabinetOrder`         - 政令
         *       * `ImperialOrder`        - 勅令
         *       * `MinisterialOrdinance` - 府省令
         *       * `Rule`                 - 規則
         *       * `Misc`                 - その他
         * @enum {string}
         */
        law_type: "Constitution" | "Act" | "CabinetOrder" | "ImperialOrder" | "MinisterialOrdinance" | "Rule" | "Misc";
        /** @description 法令一覧取得API レスポンス */
        laws_response: {
            /**
             * Format: int64
             * @description 取得件数の上限（`limit`）、何件目から取得するか（`offset`）適用前のリストに含まれる項目数（検索条件にマッチした全件数）
             * @example 10000
             */
            total_count?: number;
            /**
             * Format: int64
             * @description 返却するリスト（取得件数の上限（`limit`）、何件目から取得するか（`offset`）適用後）に含まれる項目数
             * @example 100
             */
            count: number;
            /**
             * Format: int64
             * @description 次の何件目から取得するか（`offset`）。末尾まで取得が完了した場合はnull
             * @example 200
             */
            next_offset?: number | null;
            /** @description 法令ID単位の法令情報 */
            laws?: {
                /** @description 改正履歴に依存しない法令情報 */
                law_info?: components["schemas"]["law_info"];
                /** @description 取得した改正履歴における法令情報 */
                revision_info?: components["schemas"]["revision_info"];
                /** @description 最新の履歴における法令情報<br>法令の時点（`asof`）に依存しない現在以前の最新のリビジョン */
                current_revision_info?: components["schemas"]["revision_info"];
            }[];
        };
        /**
         * mission
         * @description 新規制定又は被改正法令（New）・一部改正法令（Partial）
         *       * `New`      - 新規制定
         *       * `Partial`  - 一部改正
         * @enum {string}
         */
        mission: "New" | "Partial";
        /**
         * repeal_status
         * @description 廃止等の状態:
         *       * `None`                - 廃止・失効等の状態なし
         *       * `Repeal`              - 廃止
         *       * `Expire`              - 失効
         *       * `Suspend`             - 停止
         *       * `LossOfEffectiveness` - 実効性喪失
         * @enum {string}
         */
        repeal_status: "None" | "Repeal" | "Expire" | "Suspend" | "LossOfEffectiveness";
        /**
         * response_format
         * @description レスポンス形式（"json" 又は "xml"）
         * @enum {string}
         */
        response_format: "json" | "xml";
        /**
         * revision_info
         * @description 法令の履歴に関する情報
         */
        revision_info: {
            /**
             * @description 法令履歴ID
             * @example 322CO0000000016_20230508_505CO0000000175
             */
            law_revision_id?: string;
            /** @description 法令種別 */
            law_type?: components["schemas"]["law_type"];
            /**
             * @description 法令名
             * @example 地方自治法施行令
             */
            law_title?: string;
            /**
             * @description 法令名読み
             * @example ちほうじちほうせこうれい
             */
            law_title_kana?: string;
            /**
             * @description 法令略称
             * @example 地方自治令
             */
            abbrev?: string;
            /**
             * @description 法令分野分類
             * @example 行政組織
             */
            category?: string;
            /**
             * Format: date-time
             * @description 正誤等による更新日時
             * @example 2023-07-01T14:30:15+09:00
             */
            updated?: string;
            /**
             * Format: date
             * @description 改正法令公布日
             * @example 2023-07-01
             */
            amendment_promulgate_date?: string;
            /**
             * Format: date
             * @description 改正法令施行期日（この履歴に対応する改正の施行期日）
             * @example 2023-07-01
             */
            amendment_enforcement_date?: string;
            /**
             * @description 施行期日規定等の参考情報（この履歴に対応する改正の施行期日）
             * @example 公布の日から起算して一年を超えない範囲内において政令で定める日
             */
            amendment_enforcement_comment?: string;
            /**
             * Format: date
             * @description 擬似的な施行期日（実際の施行期日とは限らない）（この履歴に対応する改正の施行期日）
             * @example 2023-07-01
             */
            amendment_scheduled_enforcement_date?: string;
            /**
             * @description 改正法令の法令ID（この履歴に対応する改正法令）
             * @example 505CO0000000175
             */
            amendment_law_id?: string;
            /**
             * @description 改正法令名
             * @example 組織的な犯罪の処罰及び犯罪収益の規制等に関する法律等の一部を改正する法律
             */
            amendment_law_title?: string;
            /**
             * @description 改正法令名読み
             * @example そしきてきなはんざいのしょばつおよび
             */
            amendment_law_title_kana?: string;
            /**
             * @description 改正法令番号
             * @example 令和五年政令百九十二号
             */
            amendment_law_num?: string;
            /** @description 改正種別 */
            amendment_type?: components["schemas"]["amendment_type"];
            /** @description 廃止等の状態 */
            repeal_status?: components["schemas"]["repeal_status"];
            /**
             * Format: date
             * @description 廃止日
             * @example 2023-07-01
             */
            repeal_date?: string | null;
            /** @description 廃止後の効力（true:廃止後でも効力を有するもの / false:廃止後に効力を有しないもの） */
            remain_in_force?: boolean | null;
            /** @description 新規制定又は被改正法令（New）・一部改正法令（Partial） */
            mission?: components["schemas"]["mission"];
            /** @description 履歴の状態 */
            current_revision_status?: components["schemas"]["current_revision_status"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-laws": {
        parameters: {
            query?: {
                /** @description 法令ID（部分一致）<br>
                 *     > 例： `322CO0000000016`<br>
                 *      */
                law_id?: string;
                /** @description 法令番号（部分一致）<br>
                 *     > 例： `昭和二十二年政令第十六号`<br>
                 *      */
                law_num?: string;
                /** @description 法令番号の元号<br>
                 *     > 例： `Showa`<br>
                 *      */
                law_num_era?: components["schemas"]["law_num_era"];
                /** @description 法令番号の号数<br>
                 *     > 例： `88`<br>
                 *      */
                law_num_num?: string;
                /** @description 法令番号の法令種別<br>
                 *     種類の定義はSchemasの<a href="#model-law_num_type">`law_num_type`</a>を参照してください。<br>
                 *     > 例： `Act`<br>
                 *      */
                law_num_type?: components["schemas"]["law_num_type"];
                /** @description 法令番号の年<br>
                 *     > 例： `60`<br>
                 *      */
                law_num_year?: number;
                /** @description 法令名又は法令略称（部分一致）<br>
                 *     > 例： `国家行政組織法`<br>
                 *      */
                law_title?: string;
                /** @description 法令名読み（部分一致）<br>
                 *     > 例： `こっかぎょうせいそしきほう`<br>
                 *      */
                law_title_kana?: string;
                /** @description 法令種別（複数指定可）<br>
                 *     > 例： `Act`<br>
                 *      */
                law_type?: components["schemas"]["law_type"][];
                /** @description 改正法令の法令ID（部分一致）<br>
                 *     > 注意：本パラメータを指定した場合、パラメータ：法令の時点（`asof`）を無視します。<br>
                 *     > 例： `429AC0000000054`<br>
                 *      */
                amendment_law_id?: string;
                /** @description 法令の時点。指定時点以前で最新の改正履歴を、各法令の `revision_info` に格納します。省略した場合、現時点で検索します。<br>
                 *     > 例： `2023-07-01`<br>
                 *      */
                asof?: string;
                /** @description 事項別分類コード（複数指定可）<br>
                 *     コードの定義はSchemasの<a href="#model-category_cd">`category_cd`</a>を参照してください。<br>
                 *     > 例： `001,002`<br>
                 *      */
                category_cd?: components["schemas"]["category_cd"][];
                /** @description 新規制定又は被改正法令（New）・一部改正法令（Partial）を指定（複数指定可）<br>
                 *     > 例： `New,Partial`<br>
                 *      */
                mission?: components["schemas"]["mission"][];
                /** @description trueの場合、法令の時点（`asof`）に依存しない現在以前の最新の版の情報（current_revision_info）をレスポンスに含めない<br>
                 *     > 例： `true`<br>
                 *     > 既定値： `false`<br>
                 *      */
                omit_current_revision_info?: boolean;
                /** @description 公布日（指定値を含む、それ以後）<br>
                 *     > 例： `2023-07-01`<br>
                 *      */
                promulgation_date_from?: string;
                /** @description 公布日（指定値を含む、それ以前）<br>
                 *     > 例： `2023-07-01`<br>
                 *      */
                promulgation_date_to?: string;
                /** @description 廃止等の状態<br>
                 *     状態の定義はSchemasの<a href="#model-repeal_status">`repeal_status`</a>を参照してください。<br>
                 *     > 例： `Repeal,Expire`<br>
                 *
                 *     <font color=red>Expire、LossOfEffectiveness指定時のレスポンスデータについて、<br>
                 *     廃止日（`repeal_date`）は実際に法令が廃止された日ではなく、データ廃止処理日を指しますので御留意ください。</font><br>
                 *      */
                repeal_status?: components["schemas"]["repeal_status"][];
                /** @description レスポンスの laws の取得件数の上限。<br>
                 *     > 例：`50`<br>
                 *     > 既定値：`100`<br>
                 *      */
                limit?: number;
                /** @description レスポンスデータの取得開始位置。例えば10を指定した場合、11件目からレスポンスデータが取得される。<br>
                 *     1〜10件目は取得されない。<br>
                 *     > 例： `10`<br>
                 *     > 既定値： `0`<br>
                 *      */
                offset?: number;
                /** @description 並び順。返却値の項目毎に複数選択可能。先頭に"+"を付した場合は昇順、"-"の符号を付した場合は降順。符号がない場合は昇順。<br>
                 *     > 例： `+law_info.law_id,-revision_info.amendment_promulgate_date`<br>
                 *     > 既定値： `law_info.law_id`<br>
                 *      */
                order?: string;
                /** @description レスポンス形式（"json" 又は "xml"）。指定なしの場合はAcceptヘッダから判断、判断できない場合は "json" とする。<br>
                 *     > 例： `json`<br>
                 *     > 既定値： 指定なし<br>
                 *      */
                response_format?: components["schemas"]["response_format"] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 リクエスト処理、レスポンス処理が正しく行えた時 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["laws_response"];
                    "application/xml": components["schemas"]["laws_response"];
                };
            };
            /** @description 400 Bad Request API クライアント側の問題によるエラー発生時 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
            /** @description 500 Internal Server Error サーバ内処理でエラー発生時 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
        };
    };
    "get-revisions": {
        parameters: {
            query?: {
                /** @description 法令名又は法令略称（部分一致又は正規表現）<br>
                 *     * 本パラメータを`/`で囲まずに指定した場合は、部分一致で検索します。<br>
                 *     > 例： `デジタル庁設置法`<br>
                 *     * 本パラメータを`/`で囲んで指定した場合は、正規表現を利用して完全一致で検索します。<br>
                 *     > 例： `/デジタル庁.*法/`、`/^デジタル庁設置法$/`<br>
                 *      */
                law_title?: string;
                /** @description 法令名読み（部分一致）<br>
                 *     > 例： `でじたるちょうせっちほう`<br>
                 *      */
                law_title_kana?: string;
                /** @description 改正法令施行期日（指定値を含む、それ以後）<br>
                 *     > 例： `2024-06-07`<br>
                 *      */
                amendment_date_from?: string;
                /** @description 改正法令施行期日（指定値を含む、それ以前）<br>
                 *     > 例： `2024-06-07`<br>
                 *      */
                amendment_date_to?: string;
                /** @description 改正法令の法令ID（部分一致）<br>
                 *     > 例： `506AC0000000046`<br>
                 *      */
                amendment_law_id?: string;
                /** @description 改正法令の法令番号（部分一致）<br>
                 *     > 例： `令和六年法律第四十六号`<br>
                 *      */
                amendment_law_num?: string;
                /** @description 改正法令の法令名（部分一致又は正規表現）<br>
                 *     * 本パラメータを`/`で囲まずに指定した場合は、部分一致で検索します。<br>
                 *     > 例： `デジタル社会形成基本法等の一部を改正する法律`<br>
                 *     * 本パラメータを`/`で囲んで指定した場合は、正規表現を利用して完全一致で検索します。<br>
                 *     > 例： `/^情報通信技術.*法律$/`<br>
                 *      */
                amendment_law_title?: string;
                /** @description 改正法令の法令名読み（部分一致）<br>
                 *     > 例： `でじたるしゃかいけいせいきほんほうとうのいちぶをかいせいするほうりつ`<br>
                 *      */
                amendment_law_title_kana?: string;
                /** @description 改正法令公布日（指定値を含む、それ以後）<br>
                 *     > 例： `2024-06-07`<br>
                 *      */
                amendment_promulgate_date_from?: string;
                /** @description 改正法令公布日（指定値を含む、それ以前）<br>
                 *     > 例： `2024-06-07`<br>
                 *      */
                amendment_promulgate_date_to?: string;
                /** @description 改正種別（複数指定可）<br>
                 *     改正種別の定義はSchemasの<a href="#model-amendment_type">`amendment_type`</a>を参照してください。<br>
                 *     > 例： `3`<br>
                 *      */
                amendment_type?: components["schemas"]["amendment_type"][];
                /** @description 事項別分類コード（複数指定可）<br>
                 *     コードの定義はSchemasの<a href="#model-category_cd">`category_cd`</a>を参照してください。<br>
                 *     > 例： `011`<br>
                 *      */
                category_cd?: components["schemas"]["category_cd"][];
                /** @description 履歴の状態（法令の時点（asof）の値に関わらず常に現時点の状態と比較する）<br>
                 *     状態の定義はSchemasの<a href="#model-current_revision_status">`current_revision_status`</a>を参照してください。<br>
                 *     > 例： `PreviousEnforced`<br>
                 *      */
                current_revision_status?: components["schemas"]["current_revision_status"][];
                /** @description 新規制定又は被改正法令（New）・一部改正法令（Partial）を指定（複数指定可）<br>
                 *     > 例： `New`<br>
                 *      */
                mission?: components["schemas"]["mission"][];
                /** @description 廃止後の効力（true:廃止後でも効力を有するもの / false:廃止後に効力を有しないもの）<br>
                 *     > 例： `false`<br>
                 *      */
                remain_in_force?: boolean;
                /** @description 廃止日（指定値を含む、それ以後）<br>
                 *     > 例： `2024-04-01`<br>
                 *      */
                repeal_date_from?: string;
                /** @description 廃止日（指定値を含む、それ以前）<br>
                 *     > 例： `2024-04-01`<br>
                 *      */
                repeal_date_to?: string;
                /** @description 廃止等の状態<br>
                 *     状態の定義はSchemasの<a href="#model-repeal_status">`repeal_status`</a>を参照してください。<br>
                 *
                 *     > 例： `None`<br>
                 *
                 *     <font color=red>Expire、LossOfEffectiveness指定時のレスポンスデータについて、<br>
                 *     廃止日（`repeal_date`）は実際に法令が廃止された日ではなく、データ廃止処理日を指しますので御留意ください。</font><br>
                 *      */
                repeal_status?: components["schemas"]["repeal_status"][];
                /** @description データの更新日（指定値を含む、それ以後）<br>
                 *     > 例： `2024-06-07`<br>
                 *      */
                updated_from?: string;
                /** @description データの更新日（指定値を含む、それ以前）<br>
                 *     > 例： `2024-06-07`<br>
                 *      */
                updated_to?: string;
                /** @description レスポンス形式（"json" 又は "xml"）。指定なしの場合はAcceptヘッダから判断、判断できない場合は "json" とする。<br>
                 *     > 例： `json`<br>
                 *     > 既定値： 指定なし<br>
                 *      */
                response_format?: components["schemas"]["response_format"] | null;
            };
            header?: never;
            path: {
                /** @description 法令ID又は法令番号（完全一致）。<br>
                 *     > 例： `503AC0000000036`、`令和三年法律第三十六号`<br>
                 *      */
                law_id_or_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 リクエスト処理、レスポンス処理が正しく行えた時 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["law_revisions_response"];
                    "application/xml": components["schemas"]["law_revisions_response"];
                };
            };
            /** @description 400 Bad Request API クライアント側の問題によるエラー発生時 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
            /** @description 500 Internal Server Error サーバ内処理でエラー発生時 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
        };
    };
    "get-law_data": {
        parameters: {
            query?: {
                /** @description 法令本文の形式（"json" 又は "xml"）。指定なしの場合は`response_format`により判断される形式に合わせる。<br>
                 *     > 例： `json`<br>
                 *     > 既定値： 指定なし<br>
                 *      */
                law_full_text_format?: components["schemas"]["response_format"] | null;
                /** @description 法令の時点。指定時点以前で最新の履歴に対応する法令本文を取得します。<br>
                 *     `law_id_or_num_or_revision_id`に法令履歴IDを指定した場合は無視されます。<br>
                 *     > 例： `2023-04-01`<br>
                 *      */
                asof?: string;
                /** @description 法令本文の一部のみを取得する場合、取得する条項等の要素を指定します。指定しない場合は全文を取得します。<br>
                 *     指定方法はSchemasの<a href="#model-elm">`elm`</a>を参照してください。<br>
                 *     > 例： `MainProvision-Paragraph[1]`<br>
                 *      */
                elm?: components["schemas"]["elm"];
                /** @description trueの場合、レスポンスのlaw_full_textの中に改正法令の附則を含めない<br>
                 *     > 例： `true`<br>
                 *     > 既定値： `false`<br>
                 *      */
                omit_amendment_suppl_provision?: boolean;
                /** @description `true`の場合、レスポンスの`attached_files_info`の`image_data`を返却します。<br>
                 *     > 例： `true`<br>
                 *     > 既定値： `false`<br>
                 *      */
                include_attached_file_content?: boolean;
                /** @description レスポンス形式（"json" 又は "xml"）。指定なしの場合はAcceptヘッダから判断、判断できない場合は "json" とする。<br>
                 *     > 例： `json`<br>
                 *     > 既定値： 指定なし<br>
                 *      */
                response_format?: components["schemas"]["response_format"] | null;
            };
            header?: never;
            path: {
                /** @description 法令ID、法令番号又は法令履歴ID（完全一致）。<br>
                 *     > 例： `411AC0000000127`、`平成十一年法律第百二十七号`、`411AC0000000127_19990813_000000000000000`<br>
                 *      */
                law_id_or_num_or_revision_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 リクエスト処理、レスポンス処理が正しく行えた時 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["law_data_response"];
                    "application/xml": components["schemas"]["law_data_response"];
                };
            };
            /** @description 400 Bad Request API クライアント側の問題によるエラー発生時 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
            /** @description 500 Internal Server Error サーバ内処理でエラー発生時 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
        };
    };
    "get-attachment": {
        parameters: {
            query?: {
                /** @description 法令XML中のFig要素のsrc属性<br>
                 *     >  jpgの例：`./pict/H11HO127-001.jpg`<br>
                 *     <br>
                 *     >  pdfの例：`./pict/2FH00000007000.pdf`<br>
                 *      */
                src?: string;
            };
            header?: never;
            path: {
                /** @description 法令履歴ID（完全一致）<br>
                 *     > jpgの例：`411AC0000000127_19990813_000000000000000`<br>
                 *     <br>
                 *     > pdfの例：`322M40000010094_20240601_506M60000010035`<br>
                 *      */
                law_revision_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 リクエスト処理、レスポンス処理が正しく行えた時 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description 400 Bad Request API クライアント側の問題によるエラー発生時 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
            /** @description 500 Internal Server Error サーバ内処理でエラー発生時 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
        };
    };
    "get-keyword": {
        parameters: {
            query: {
                /** @description キーワード<br>
                 *     入力したキーワードを含む法令本文を検索します。<br>
                 *     ワイルドカード検索、AND検索、OR検索、NOT検索でキーワードを指定できます。<br>
                 *     * ワイルドカード検索
                 *
                 *     > 例えば、第○条のように一部のキーワードが不明な時にワイルドカードを使用すると、該当する法令本文を検索することができます。
                 *
                 *     > <table bgcolor="white" border="1">
                 *        <tr bgcolor="#DDFFFF">
                 *          <th width=20%>キーワード</th>
                 *          <th width=20%>該当する例</th>
                 *          <th width=20%>備考</th>
                 *        </tr>
                 *        <tr>
                 *          <td>第*条</td>
                 *          <td>第二十一条</td>
                 *          <td>*は0文字以上の文字</td>
                 *        </tr>
                 *        <tr>
                 *          <td>第?条</td>
                 *          <td>第五条</td>
                 *          <td>?は1文字の文字</td>
                 *        </tr>
                 *     </table>
                 *
                 *
                 *     * AND検索、OR検索、NOT検索
                 *
                 *     > 検索方法の仕様は、<a href="https://laws.e-gov.go.jp/help/#how-to-write-a-search-expression" target="_blank">検索式の書き方</a>をご覧ください。<br>
                 *     > 複数のキーワードを記号でつなげることにより、AND検索、OR検索、NOT検索を組み合わせて検索することができます。<br>
                 *     > ワイルドカード検索と組み合わせて検索することはできません。
                 *     > <br>
                 *     > <br>
                 *     > 例： `デジタル庁`<br>
                 *      */
                keyword: string;
                /** @description 法令番号（部分一致）<br>
                 *     > 例： `平成二十八年個人情報保護委員会規則第六号`<br>
                 *      */
                law_num?: string;
                /** @description 法令番号の元号<br>
                 *     > 例： `Heisei`<br>
                 *      */
                law_num_era?: components["schemas"]["law_num_era"];
                /** @description 法令番号の号数<br>
                 *     > 例： `006`<br>
                 *      */
                law_num_num?: string;
                /** @description 法令番号の法令種別<br>
                 *     種類の定義はSchemasの<a href="#model-law_num_type">`law_num_type`</a>を参照してください。<br>
                 *     > 例： `Rule`<br>
                 *      */
                law_num_type?: components["schemas"]["law_num_type"];
                /** @description 法令番号の年<br>
                 *     > 例： `28`<br>
                 *      */
                law_num_year?: number;
                /** @description 法令種別、複数指定可<br>
                 *     > 例： `Rule`<br>
                 *      */
                law_type?: components["schemas"]["law_type"][];
                /** @description 法令の時点。指定時点以前で最新の改正履歴を、各法令の `revision_info` に格納します。省略した場合、現時点で検索します。<br>
                 *     > 例： `2024-05-27`<br>
                 *      */
                asof?: string;
                /** @description 事項別分類コード（複数指定可）<br>
                 *     コードの定義はSchemasの<a href="#model-category_cd">`category_cd`</a>を参照してください。<br>
                 *     > 例： `021`<br>
                 *      */
                category_cd?: components["schemas"]["category_cd"][];
                /** @description 公布日(開始)<br>
                 *     > 例： `2016-12-15`<br>
                 *      */
                promulgation_date_from?: string;
                /** @description 公布日(終了)<br>
                 *     > 例： `2016-12-15`<br>
                 *      */
                promulgation_date_to?: string;
                /** @description レスポンスのsentencesのposition数の総和の上限。<br>
                 *     > 例：`50`<br>
                 *     >  既定値： `100`<br>
                 *     >  上限値： `1000`
                 *      */
                limit?: number;
                /** @description レスポンスデータの取得開始位置。例えば10を指定した場合、11件目からレスポンスデータが取得される。<br>
                 *     1〜10件目は取得されない。<br>
                 *     > 例： `10`<br>
                 *     > 既定値： `0`<br>
                 *      */
                offset?: number;
                /** @description 並び順。返却値の項目毎に複数選択可能。先頭に"+"を付した場合は昇順、"-"の符号を付した場合は降順。符号がない場合は昇順。<br>
                 *     > 例： `+law_info.law_id,-revision_info.amendment_promulgate_date`<br>
                 *     > 既定値： `law_info.law_id`<br>
                 *      */
                order?: string;
                /** @description レスポンス形式（"json" 又は "xml"）。指定なしの場合はAcceptヘッダから判断、判断できない場合は "json" とする。<br>
                 *     > 例： `json`<br>
                 *     > 既定値： 指定なし<br>
                 *      */
                response_format?: components["schemas"]["response_format"] | null;
                /** @description sentencesに表示される件数が制限されます。<br>
                 *     limitで指定した件数とレスポンスで取得される件数が合わなくなることがあります。<br>
                 *     limitを上回る値を指定した場合、limitの指定値が優先されます。<br>
                 *     > 例：`5`<br>
                 *      */
                sentences_limit?: number;
                /** @description レスポンス：`items`->`sentences`->`text` の表示文字数（highlight_tagで指定したHTMLタグを含む）<br>
                 *     > 例：`20`<br>
                 *     > 既定値： `100`<br>
                 *      */
                sentence_text_size?: number;
                /** @description keywordで指定された文言のヒット箇所を囲むHTMLタグ名。<br>
                 *     > 例： `em`<br>
                 *     > 規定値： `span`<br>
                 *      */
                highlight_tag?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 リクエスト処理、レスポンス処理が正しく行えた時 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["keyword_response"];
                    "application/xml": components["schemas"]["keyword_response"];
                };
            };
            /** @description 400 Bad Request API クライアント側の問題によるエラー発生時 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
            /** @description 500 Internal Server Error サーバ内処理でエラー発生時 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
        };
    };
    "get-law_file": {
        parameters: {
            query?: {
                /** @description 法令の時点。指定時点以前で最新の履歴に対応する法令本文ファイルを取得します。<br>
                 *     `law_id_or_num_or_revision_id`に法令履歴IDを指定した場合は無視されます。<br>
                 *     > 例： `2023-04-01`<br>
                 *      */
                asof?: string;
            };
            header?: never;
            path: {
                /** @description 法令ID、法令番号又は法令履歴ID（完全一致）。<br>
                 *     > 例： `405AC0000000088`、`昭和二十二年政令第十六号`、`322CO0000000016_20240401_505CO0000000293`<br>
                 *      */
                law_id_or_num_or_revision_id: string;
                /** @description ファイル種別<br>
                 *     コードの定義はSchemasの<a href="#model-file_type">`file_type`</a>を参照してください。<br>
                 *     > 例： `xml`<br>
                 *      */
                file_type: components["schemas"]["file_type"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 リクエスト処理、レスポンス処理が正しく行えた時 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description 400 Bad Request API クライアント側の問題によるエラー発生時 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
            /** @description 500 Internal Server Error サーバ内処理でエラー発生時 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_info"];
                    "application/xml": components["schemas"]["error_info"];
                };
            };
        };
    };
}
